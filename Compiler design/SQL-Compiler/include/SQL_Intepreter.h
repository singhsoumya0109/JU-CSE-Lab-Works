#ifndef __SQL_INTERPRETER_H__
#define __SQL_INTERPRETER_H__

#include <iostream>
#include "Lexer.h"
#include "parser.h"

/**
 * @file SQL_Interpreter.h
 * @brief Header file for the SQLInterpreter class, responsible for interpreting SQL queries.
 *
 * This file defines the SQLInterpreter class, which integrates a lexer and parser to process
 * and interpret SQL queries based on a specified verbosity level.
 */

/**
 * @class SQLInterpreter
 * @brief A class that interprets SQL queries using a lexer and parser.
 *
 * The SQLInterpreter class orchestrates the tokenization and parsing of SQL queries. It uses
 * a Lexer to break down input strings into tokens and a Parser to analyze the token sequence,
 * with output controlled by a verbosity level.
 */
class SQLInterpreter
{
    private:
        Lexer lexer; ///< Lexer instance for tokenizing SQL queries.
        int verbosity; ///< Verbosity level controlling the detail of output (e.g., 1 or 2).
        Parser parser; ///< Parser instance for analyzing tokenized SQL queries.

        /**
         * @brief Prints the list of tokens generated by the lexer.
         * @param tokens The vector of Token objects to print.
         */
        void printTokens(vector<Token> tokens);

        /**
         * @brief Trims leading and trailing whitespace from a string.
         * @param str The string to trim.
         * @return The trimmed string.
         */
        string trim(const string &str);

        /**
         * @brief Converts a string to lowercase.
         * @param str The string to convert (modified in place).
         */
        void toLowercase(std::string& str);

    public:
        /**
         * @brief Constructs an SQLInterpreter with a specified verbosity level.
         *
         * Initializes the interpreter with a verbosity level that controls the detail of output
         * during query processing.
         *
         * @param verbosity The verbosity level (e.g., 1 for minimal, 2 for detailed).
         */
        explicit SQLInterpreter(int verbosity);

        /**
         * @brief Default destructor for the SQLInterpreter class.
         *
         * Cleans up resources automatically; no special cleanup required.
         */
        ~SQLInterpreter() = default;

        /**
         * @brief Initializes and runs the SQL interpreter.
         *
         * Starts the interpretation process, prompting for input, tokenizing it, and parsing it
         * according to the configured verbosity level.
         */
        void init_interpreter();
};

#endif